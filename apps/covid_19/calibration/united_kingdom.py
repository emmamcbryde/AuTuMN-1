from apps.covid_19.calibration import base
from autumn.constants import Region
from apps.covid_19.mixing_optimisation.utils import (
    get_prior_distributions_for_opti,
    get_target_outputs_for_opti,
    get_weekly_summed_targets,
)


country = Region.UNITED_KINGDOM

PAR_PRIORS = get_prior_distributions_for_opti()
# TARGET_OUTPUTS = get_target_outputs_for_opti(country, data_start_time=50, update_jh_data=False)
TARGET_OUTPUTS = [
    {
        "output_key": "notifications",
        "years": [
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
        ],
        "values": [
            2,
            1,
            0,
            5,
            2,
            4,
            3,
            7,
            12,
            5,
            33,
            40,
            55,
            56,
            49,
            79,
            55,
            54,
            147,
            258,
            411,
            489,
            479,
            364,
            442,
            612,
            768,
            999,
            1055,
            1254,
            1197,
            1376,
            2335,
            2371,
            2693,
            3084,
            3201,
            2822,
            2857,
            4273,
            4515,
            4914,
            4865,
            4915,
            4020,
            3594,
            5275,
            5450,
            5129,
            4852,
            4315,
            3577,
            3495,
            4183,
            4325,
            5065,
            5298,
            4965,
            4716,
            3852,
            4858,
            4760,
            5490,
            5143,
            4973,
            3748,
            3468,
            4702,
            4721,
            5435,
            4956,
            4727,
            3221,
            2974,
            3378,
            3684,
            3831,
            3767,
            3049,
            2150,
            2321,
            3583,
            3389,
            3298,
            2609,
            2517,
            2065,
            1826,
            2574,
            3041,
            2706,
            2542,
            2030,
            1507,
            1348,
            1607,
            1650,
            1802,
            1734,
            1504,
            1099,
            1069,
            1434,
            1467,
            1342,
            1234,
            1105,
            791,
            717,
            1086,
            1153,
            1182,
            1001,
            1053,
            887,
            807,
            1026,
            1077,
            997,
            1020,
            980,
            666,
            622,
            892,
            882,
            774,
            697,
            638,
            633,
            395,
            604,
            403,
            60,
            4,
            502,
            624,
        ],
        "loglikelihood_distri": "negative_binomial",
    },
    {
        "output_key": "infection_deathsXall",
        "years": [
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
            95,
            96,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            123,
            124,
            125,
            126,
            127,
            128,
            129,
            130,
            131,
            132,
            133,
            134,
            135,
            136,
            137,
            138,
            139,
            140,
            141,
            142,
            143,
            144,
            145,
            146,
            147,
            148,
            149,
            150,
            151,
            152,
            153,
            154,
            155,
            156,
            157,
            158,
            159,
            160,
            161,
            162,
            163,
            164,
            165,
            166,
            167,
            168,
            169,
            170,
            171,
            172,
            173,
            174,
            175,
            176,
            177,
            178,
            179,
            180,
            181,
            182,
            183,
            184,
            185,
        ],
        "values": [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            1,
            4,
            0,
            2,
            1,
            18,
            15,
            22,
            16,
            34,
            43,
            36,
            56,
            35,
            74,
            149,
            186,
            183,
            284,
            294,
            214,
            374,
            382,
            670,
            652,
            714,
            760,
            644,
            568,
            1038,
            1034,
            1103,
            1152,
            839,
            686,
            744,
            1044,
            842,
            1029,
            935,
            1115,
            498,
            559,
            1172,
            837,
            727,
            1005,
            843,
            420,
            338,
            909,
            795,
            674,
            739,
            621,
            315,
            288,
            693,
            649,
            539,
            626,
            346,
            268,
            210,
            627,
            494,
            428,
            384,
            468,
            170,
            160,
            545,
            363,
            338,
            351,
            282,
            118,
            121,
            134,
            412,
            377,
            324,
            215,
            113,
            556,
            324,
            359,
            176,
            357,
            204,
            77,
            55,
            286,
            245,
            151,
            202,
            181,
            36,
            38,
            233,
            184,
            135,
            173,
            128,
            43,
            15,
            280,
            154,
            149,
            184,
            100,
            36,
            25,
            155,
            176,
            89,
            136,
            67,
        ],
        "loglikelihood_distri": "negative_binomial",
    },
]

# Use weekly counts
for target in TARGET_OUTPUTS:
    target["years"], target["values"] = get_weekly_summed_targets(target["years"], target["values"])

MULTIPLIERS = {}


def run_calibration_chain(max_seconds: int, run_id: int, num_chains: int):
    base.run_calibration_chain(
        max_seconds, run_id, num_chains, country, PAR_PRIORS, TARGET_OUTPUTS, mode="autumn_mcmc",
    )


if __name__ == "__main__":
    for i in range(len(TARGET_OUTPUTS)):
        print(TARGET_OUTPUTS[i]["output_key"])
        print(TARGET_OUTPUTS[i]["years"])
        print([[v] for v in TARGET_OUTPUTS[i]["values"]])
        print()

    run_calibration_chain(
        30, 1
    )  # first argument only relevant for autumn_mcmc mode (time limit in seconds)
